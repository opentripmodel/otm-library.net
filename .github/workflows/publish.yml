name: OTM Package Pipeline

# shared env for all jobs
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO:                     true
  NUGET_OUTPUT:                      ${{ github.workspace }}/nuget

permissions:
  contents: read
  packages: write

on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    tags: ['Model/v*', 'Profile/v*', 'Serializer/*']

#    branches:
#      - main # build & pack on every push to main


jobs:
  build_pack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Debug path
        run:  |
              echo "Listing .github/scripts:"
              ls -al .github/workflows || true


      # Decide if we’re on a tag build or a branch build
      - name: Determine build scope
        id:   meta
        run:  bash .github/workflows/scripts/determine-scope.sh "$GITHUB_REF"


      - name: Debug Echo build scope
        run:  |
              echo "Scope   = ${{ steps.meta.outputs.scope }}"
              echo "Project = ${{ steps.meta.outputs.project }}"
              echo "Version = ${{ steps.meta.outputs.version }}"

      #
      #- name: Pack libraries
      #  shell: bash
      #  run: |
      #    mkdir -p "$NUGET_OUTPUT"
      #
      #    if [[ "${{ steps.meta.outputs.scope }}" == "tag" ]]; then
      #        # map project prefix to csproj path
      #        case "${{ steps.meta.outputs.project }}" in
      #          Model)      cs="src/Otm.Model/Otm.Model.csproj"      ;;
      #          Profile)    cs="src/Otm.Profile/Otm.Profile.csproj"  ;;
      #          Serializer) cs="src/Otm.Serializer/Otm.Serializer.csproj" ;;
      #          *) echo "Unknown project"; exit 1 ;;
      #        esac
      #        echo "Packing $cs as version ${{ steps.meta.outputs.version }}"
      #        dotnet pack "$cs" -c Release -o "$NUGET_OUTPUT" --no-build \
      #          /p:Version=${{ steps.meta.outputs.version }}
      #    else
      #        # snapshot build – pack every project under src/Otm.*
      #        for cs in src/Otm.*/*.csproj; do
      #            echo "Packing $cs (snapshot)"
      #            dotnet pack "$cs" -c Release -o "$NUGET_OUTPUT" --no-build
      #        done
      #    fi

      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget
          path: ${{ env.NUGET_OUTPUT }}/*.nupkg


  deploy:
    runs-on: ubuntu-latest
    needs:   build_pack
    # if:      github.event_name == 'release'  # only run on GitHub “Release” events (which are triggered via the UI)

    steps:
      - name: Download Package Artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NUGET_OUTPUT }}

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Publish to NuGet Gallery
        run:  |
              for pkg in ${{ env.NUGET_OUTPUT }}/*.nupkg; do
                dotnet nuget push "$pkg" \
                  --source https://api.nuget.org/v3/index.json \
                  --api-key ${{ secrets.NUGET_APIKEY }}
              done
              
