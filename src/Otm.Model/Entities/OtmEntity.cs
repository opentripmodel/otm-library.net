using System;
using System.Collections.Generic;

namespace OpenTripModel.v5
{
    public abstract class OtmEntity
    {
        /// <summary>
        /// Uniquely identifies this entity. A URI can be assigned by the client or will be generated by 
        /// the server if the client doesn't provide it. Once assigned, the URI can't be changed.
        /// </summary>
        public System.Guid? Id { get; set; }



        /// <summary>
        /// Name of the entity. 
        /// For display purposes and search only.
        /// </summary>
        public System.String Name { get; set; }



        /// <summary>
        /// The creation date of this entity
        /// </summary>
        public Nullable<System.DateTime> CreationDate { get; set; }



        /// <summary>
        /// The last modified date of this entity. 
        /// </summary>
        public Nullable<System.DateTime> LastModified { get; set; }



        /// <summary>
        /// The context events provides some optional information about the events that can provide 
        /// additional information on the current state of this entity.
        ///
        /// For example: your system might send ETA information for the arrival of a vehicle on a location.
        /// To make it clear what caused this ETA to be updated, we can include some information about what 
        /// caused this ETA update by including an event as context. If your ETA update was caused by a 
        /// location update, this event can be included as context.If the ETA was caused by a traffic accident 
        /// on the route of the vehicle, you can include that event in the context.
        /// </summary>
        public List<Event> ContextEvents { get; set; } 



        /// <summary>
        /// External attributes are a simple way to add information in an OpenTripModel message that could not 
        /// fit into one of the OTM fields otherwise. The externalAttributes member is meant for additional metadata 
        /// and/or additional ID's of an entity. This can also help to identify an OTM entity in a system by the ID 
        /// of that system.
        /// </summary>
        public ExternalAttributes ExternalAttributes { get; set; }
    }
}